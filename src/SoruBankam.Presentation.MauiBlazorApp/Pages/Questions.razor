@page "/questions"
@inject IQuestionManager questionManager;

<div class="container">
    @if (!cevapGoster)
    {
    <div class="row m-2">
            <img height="200" width="300" src="@base64ImageQuestion" />
    </div>
    }
    else{
        <div class="row m-2">
            <img height="200" width="300" src="@base64ImageAnswer" />
        </div>
    }
    
    <div class="row m-2">
        <h4>Açıklama</h4>
        <p>@currentQuestion.Description</p>
    </div>
    <div class="row m-2">
        <div class="col">
            <button class="btn btn-primary" @onclick="PreviousQuestion" type="button">Önceki Soru</button>
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="NextQuestion" type="button">Sonraki Soru</button>
        </div>
        <div class="col">
            @if(cevapGoster){
                <button class="btn btn-warning" @onclick="CevapGoster" type="button">Soru</button>
            }
            else{
                <button class="btn btn-warning" @onclick="CevapGoster" type="button">Cevap</button>
            }
            
        </div>
    </div>
</div>

@code {
    String base64ImageQuestion = "";
    String base64ImageAnswer = "";
    private bool cevapGoster = false;

    private List<Question> questions;
    private Question currentQuestion = new Question(); //şu anki soru

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        await GetAllQuestions();

        questionManager.questionAdded += question =>
        {
            questions.Add(question);
        };

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task CevapGoster()
    {
        cevapGoster = !cevapGoster;

        // Kod tarafındaki değişiklikleri ekranda göstermek için kullanılan kod parçasıdır.
        await InvokeAsync(() => StateHasChanged());
    }

    private async Task PreviousQuestion()
    {
        var indexOf = questions.IndexOf(currentQuestion);

        if (indexOf == 0)
            return;

        await SetCurrentQuestion(questions[indexOf - 1]);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task NextQuestion()
    {
        var indexOf = questions.IndexOf(currentQuestion);

        if (indexOf >= questions.Count - 1)
            return;

        await SetCurrentQuestion(questions[indexOf + 1]);

        await InvokeAsync(() => StateHasChanged());
    }

    private async Task GetAllQuestions()
    {
        questions = questionManager.GetAll();
        await SetCurrentQuestion(questions.FirstOrDefault());
    }

    private async Task SetCurrentQuestion(Question question)
    {
        if (question == null)
            return;

        cevapGoster = false;

        base64ImageQuestion = Base64Tool.ToBase64(question.Photo);
        base64ImageAnswer = Base64Tool.ToBase64(question.AnswerPhoto);
        currentQuestion = question;

        await InvokeAsync(() => StateHasChanged());
    }
}
